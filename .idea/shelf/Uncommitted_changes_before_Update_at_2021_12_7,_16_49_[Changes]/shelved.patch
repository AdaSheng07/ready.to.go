Index: 03.bmicalc/main.go
===================================================================
diff --git a/03.bmicalc/main.go b/03.bmicalc/main.go
deleted file mode 100644
--- a/03.bmicalc/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ /dev/null	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
@@ -1,16 +0,0 @@
-package main
-
-func main() {
-	var weight float64 = 65.0
-	var height flaot64 = 1.70
-	var bmi float64 = weight / (weight * weight)
-	var age int = 35
-	var sexWeight int
-	var sex string
-	if sex == "男" {
-		sexWeight = 0
-	} else if sex == "女" {
-		sexWeight = 1
-	}
-
-}
Index: 04.bmiCalculator/main.go
===================================================================
diff --git a/04.bmiCalculator/main.go b/04.bmiCalculator/main.go
deleted file mode 100644
--- a/04.bmiCalculator/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ /dev/null	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
@@ -1,16 +0,0 @@
-package main
-
-func main() {
-	var weight float64 = 65.0
-	var height flaot64 = 1.70
-	var bmi float64 = weight / (weight * weight)
-	var age int = 35
-	var sexWeight int
-	var sex string
-	if sex == "男" {
-		sexWeight = 0
-	} else if sex == "女" {
-		sexWeight = 1
-	}
-
-}
Index: 03.switch2/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/03.switch2/main.go b/03.switch2/main.go
--- a/03.switch2/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/03.switch2/main.go	(date 1638866261400)
@@ -1,0 +1,55 @@
+package main
+
+import (
+	"fmt"
+	"strconv"
+)
+
+/*
+switch与if-else的比较
+1. switch可以完全替代if-else条件表达式，且分支表达式可以做不一样的事，switch的分支表达式可以随时终止
+2. switch可以并入其他条件分支继续执行，e.g. case 1 执行完毕后，直接调入 case 2 执行，并且不需要符合 case 2 条件：fallthrough
+3. fallthrough的情况在状态机中经常存在，用于状态的流转
+*/
+
+func main() {
+	var money float64
+	var busy bool
+	var num1, num2 string
+	fmt.Println("兜里有多少钱？")
+	fmt.Scanln(&num1)
+	money, _ = strconv.ParseFloat(num1, 64)
+	fmt.Println("忙不忙？")
+	fmt.Scanln(&num2)
+
+	switch {
+	case num2 == "Y" || num2 == "y" || num2 == "忙":
+		busy = true
+	case num2 == "N" || num2 == "n" || num2 == "不忙":
+		busy = false
+	}
+
+	switch {
+	case money == 0:
+		fmt.Println("饿着吧")
+	case money > 0 && money <= 20:
+		fmt.Println("点个外卖")
+		if !busy {
+			fmt.Println("不忙，吃点零食")
+			break // 分支表达式随时终止程序
+		} else {
+			fmt.Println("忙，差不多吃点得了")
+		}
+	case !busy && money > 20 && money <= 200:
+		fmt.Println("下个馆子")
+	case !busy && money > 200 && money <= 2000:
+		fmt.Println("去米其林")
+	case !busy && money > 2000 && money <= 20000:
+		fmt.Println("出去玩一圈")
+		fallthrough // 直接进入下一个处理分支而无需判断条件
+	case !busy && money > 20000 && money <= 50000:
+		fmt.Println("嗨起来！") // 因fallthrough此条也将执行
+	default:
+		fmt.Println("容我想想")
+	}
+}
Index: 04.for/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport (\n\t\"fmt\"\n)\n\nfunc main() {\n\tfmt.Println(\"Round 1\")\n\tfor i := 0; i < 5; i++ {\n\t\tfmt.Println(\"你好，Golang!\")\n\t}\n\n\tfmt.Println(\"Round 2\")\n\tj := 0\n\tfor ; j < 5; j++ {\n\t\tfmt.Println(\"Hello, Golang!\")\n\t}\n\n\tfmt.Println(\"Round 3\")\n\tk := 0\n\tfor k < 5 { // 省略;\n\t\tfmt.Println(\"Hi, Golang!\")\n\t\tk++\n\t}\n\n\tfmt.Println(\"Round 4\")\n\tm := 0\n\tfor {\n\t\tfmt.Println(\"Yo, Golang!\")\n\t\tm++\n\t\tif m >= 5 {\n\t\t\tbreak // 打断跳出for循环\n\t\t}\n\t}\n\n\tfmt.Println(\"Round 5\")\n\tm = 0\n\tfor {\n\t\tfmt.Println(\"Hello, Golang!\", m)\n\t\tm++\n\t\tif m >= 10 {\n\t\t\tbreak\n\t\t}\n\t\tif m%2 == 0 {\n\t\t\tfmt.Println(\"Round 5，被continue跳过\")\n\t\t\tcontinue\n\t\t}\n\t\tfmt.Println(\"Round 5，练习跳过\", m)\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/04.for/main.go b/04.for/main.go
--- a/04.for/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/04.for/main.go	(date 1638866261403)
@@ -34,18 +34,18 @@
 	}
 
 	fmt.Println("Round 5")
-	m = 0
+	n := 0
 	for {
-		fmt.Println("Hello, Golang!", m)
-		m++
-		if m >= 10 {
+		fmt.Println("Hello, Golang!", n)
+		n++
+		if n >= 10 { // n=10时结束循环
 			break
 		}
-		if m%2 == 0 {
+		if n%2 == 0 {
 			fmt.Println("Round 5，被continue跳过")
-			continue
+			continue // n为偶数时，跳过当前循环的剩余语句，继续进行下一轮循环
 		}
-		fmt.Println("Round 5，练习跳过", m)
+		fmt.Println("Round 5，练习跳过", n)
 	}
 
 }
Index: 03.ifelse1/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport \"fmt\"\n\nfunc main() {\n\n\t// round 1\n\tfmt.Println(\"Round 1\")\n\tvar fruit1 = \"six apples\"\n\twatermelon := true\n\tif watermelon {\n\t\tfruit1 = \"an apple\"\n\t}\n\tfmt.Printf(\"I bought %s.\\n\", fruit1)\n\n\t// round 2\n\tfmt.Println(\"Round 2\")\n\tvar fruit2 = \"six apples\"\n\tbanana := false\n\tif !banana {\n\t\tfruit2 = \"a watermelon and two bananas\"\n\t} else {\n\t\tfruit2 = \"four apples\"\n\t}\n\tfmt.Printf(\"I bought %s.\\n\", fruit2)\n\n\t// round 3\n\tfmt.Println(\"Round 3\")\n\tvar fruit3 = \"strawberries\"\n\tvar applePrice = 4\n\tif applePrice >= 7 {\n\t\tfmt.Printf(\"I only bought %s.\\n\", fruit3)\n\t} else if applePrice > 5 {\n\t\tfmt.Printf(\"I bought %s and two apples.\\n\", fruit3)\n\t} else {\n\t\tfmt.Printf(\"I bought %s and four apples.\\n\", fruit3)\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/03.ifelse1/main.go b/03.ifelse1/main.go
--- a/03.ifelse1/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/03.ifelse1/main.go	(date 1638866261384)
@@ -2,6 +2,40 @@
 
 import "fmt"
 
+/*
+if语句语法：
+	if 布尔表达式 {
+   		// 在布尔表达式为 true 时执行
+	}
+
+if-else语句语法：
+	if 布尔表达式 {
+   		// 在布尔表达式为 true 时执行
+	} else {
+		// 在布尔表达式为 false 时执行
+	}
+
+if语句嵌套语法：
+	if 布尔表达式 1 {
+   		// 在布尔表达式 1 为 true 时执行
+		if 布尔表达式 2 {
+			// 在布尔表达式 2 为 true 时执行
+		}
+	}
+
+else-if语句嵌套语法：
+	if 布尔表达式 1 {
+   		// 在布尔表达式 1 为 true 时执行
+	} else if 布尔表达式 2 {
+		// 在布尔表达式 1 为 false 且布尔表达式 2 为 true 时执行
+	} else if 布尔表达式 3 {
+		// 在布尔表达式 1 为 false, 布尔表达式 2 为 false, 且布尔表达式 3 为 true 时执行
+	} else {
+		// 在布尔表达式 1,2,3 均为 false 时执行
+	}
+
+*/
+
 func main() {
 
 	// round 1
Index: 03.ifelse2/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main\n\nimport \"fmt\"\n\nfunc main() {\n\tvar money int\n\tif money >= 20 {\n\t\tfmt.Println(\"点个外卖\")\n\t} else if money >= 200 {\n\t\tfmt.Println(\"去下馆子\")\n\t} else if money >= 2000 {\n\t\tfmt.Println(\"去米其林\")\n\t} else if money >= 20000 {\n\t\tfmt.Println(\"出国玩一圈\")\n\t} else {\n\t\tfmt.Println(\"饿着吧\")\n\t}\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/03.ifelse2/main.go b/03.ifelse2/main.go
--- a/03.ifelse2/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/03.ifelse2/main.go	(date 1638866261391)
@@ -2,6 +2,18 @@
 
 import "fmt"
 
+/*
+else-if语句嵌套语法：
+	if 布尔表达式 1 {
+   		// 在布尔表达式 1 为 true 时执行
+	} else if 布尔表达式 2 {
+		// 在布尔表达式 1 为 false 且布尔表达式 2 为 true 时执行
+	} else if 布尔表达式 3 {
+		// 在布尔表达式 1 为 false, 布尔表达式 2 为 false, 且布尔表达式 3 为 true 时执行
+	} else {
+		// 在布尔表达式 1,2,3 均为 false 时执行
+	}
+*/
 func main() {
 	var money int
 	if money >= 20 {
Index: 03.switch3/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/03.switch3/main.go b/03.switch3/main.go
--- a/03.switch3/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/03.switch3/main.go	(date 1638866261407)
@@ -1,0 +1,49 @@
+package main
+
+import (
+	"fmt"
+	"reflect"
+)
+
+/*
+switch语句原生支持类型判断
+1. 可以利用 type-switch 来判断某个 interface 变量中实际存储的变量类型
+2. interface{} 是一个空的 interface 类型，是抽象的，其内容可以【接受】任何具体的类型如 int, float64, string 等
+3. 用 type-switch 类型判断的同时可以赋值新的变量，且类型自动匹配，新的变量的类型是万用的
+4. case 也可以是多分支条件的
+
+p.s. verb 通用输出：
+	%v	值的默认格式表示
+	%+v	类似%v，但输出结构体时会添加字段名
+	%#v	值的Go语法表示
+	%T	值的类型的Go语法表示
+	%%	百分号
+*/
+
+func main() {
+	var money interface{} = 100.5
+	// var money interface{} = "100块"
+	// var money interface{} = 43.5
+
+	switch newMoney := money.(type) { // 类型判断的同时赋值新的变量 newMoney
+	case int, int8, int16, int32, int64: // case 可以多条件
+		newMoney = 10
+		// newMoney = newMoney + 12.34 // Invalid operation: newMoney + 12.34 (cannot convert the constant 12.34 to the type int)
+		fmt.Printf("newMoney %#v 是 %v\n", newMoney.(int)+10, reflect.TypeOf(newMoney))
+	case float64, float32: // case 可以多条件
+		newMoney = 10.5
+		fmt.Printf("newMoney %#v 是 %v\n", newMoney.(float64)+10.5, reflect.TypeOf(newMoney))
+	case string:
+		newMoney = newMoney + "哈"
+		fmt.Printf("newMoney %#v 是 %v\n", newMoney, reflect.TypeOf(newMoney))
+	default:
+		fmt.Printf("newMoney %#v 是 %v\n", newMoney, reflect.TypeOf(newMoney))
+		fmt.Printf("money %#v 类型未知\n", money)
+	}
+	fmt.Println(money, reflect.TypeOf(money))
+	// 可以对interface类型的变量重新赋值，变量类型也可以发生改变
+	money = 34.6
+	fmt.Println(money, reflect.TypeOf(money))
+	fmt.Println("END")
+
+}
Index: 03.switch1/main.go
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/03.switch1/main.go b/03.switch1/main.go
--- a/03.switch1/main.go	(revision 342d6c5c0b4845dab5cc143d5079b3031ab72a75)
+++ b/03.switch1/main.go	(date 1638866261414)
@@ -1,0 +1,36 @@
+package main
+
+import "fmt"
+
+/* switch
+1. 基于不同条件执行不同动作，每个 case 分支唯一，从上至下逐一测试，直到匹配为止
+2. 执行的过程从上至下，直到找到匹配项，匹配项后面也不需要再加 break
+3. 默认情况下 case 最后自带 break 语句，匹配成功后就不会执行其他 case，如果需要执行后面的 case，可使用 fallthrough
+
+switch语句语法：
+	switch var1 {
+		case val1:
+			...
+		case val2:
+			...
+		default:
+			...
+	}
+	* 可以同时测试多个可能符合条件的值，使用逗号分割，例如：case val1, val2, val3
+*/
+
+func main() {
+	var money int
+	switch {
+	case money >= 20:
+		fmt.Println("点个外卖")
+	case money >= 200:
+		fmt.Println("下个馆子")
+	case money >= 2000:
+		fmt.Println("去米其林")
+	case money >= 20000:
+		fmt.Println("出国玩一圈")
+	default: // 非必需分支，如果没有此分支，无输出
+		fmt.Println("饿着吧")
+	}
+}
diff --git a/02.string/main.go b/02.string/main.go
deleted file mode 100644
diff --git a/03.for/main.go b/03.for/main.go
deleted file mode 100644
diff --git a/03.condition/main.go b/03.condition/main.go
deleted file mode 100644
diff --git a/03.bmi/main.go b/03.bmi/main.go
deleted file mode 100644
diff --git a/02.circlearea/main.go b/02.circlearea/main.go
deleted file mode 100644
diff --git a/03.condition2/main.go b/03.condition2/main.go
deleted file mode 100644
